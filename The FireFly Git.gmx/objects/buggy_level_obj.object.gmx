<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>buggy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
state = "spawning"; // "dead" or "deadfinal"
alarm[11] = 13;
image_xscale = 14;
image_yscale = 14;
//image_alpha = .25;
facedir = "left";
combo = 0;
combo_max = 5;
points = 0;
godmode = false;
godmodez = "false";
//canjump = true;
//jumpspeed = -1;


gravity = 0;
friction = .07;
image_speed = .3;
max_speed = 3;

// Particle system for death;

system = part_system_create(); 
//part_system_automatic_draw(system,true); //Sets whether the particles 
//will automatically be drawn onto the screen without first calling a 
//function. If you do not execute this function, a default value of 
//FALSE is given. 

part_system_automatic_update(system,true); //Sets whether the 
//position/state of particles will be updated automatically. This is 
//given a default value of FALSE. 

part_system_clear(system); //Resets the particle-system. This resets 
//all the settings to their default values, and destroys all filters 
//and types placed inside it. 

part_system_depth(system,0); //Gives a DEPTH for the particle-system. 
//Particles need to be given a depth, right? So this value determines 
//when to draw particles under/over other things. 

//part_system_destroy(system); //Completely removes the 
//particle-system from the memory. This includes all 
//filters and types. 

part_system_draw_order(system,true); //Whether to draw 
//new particles behind old ones, or vice versa. An 
//example to the left (darker the particles, the older) 
//shows this.

emitter = part_emitter_create(system); 
//part_emitter_region(system,emitter,140,140,170,170,ps_shape_rectangle,ps_distr_linear); 

////



particle0 = part_type_create();
part_type_alpha1(particle0, 1);
col1 = make_color_rgb(230,80,80);
col2 = make_color_rgb(50,0,0);
col1 = make_color_rgb(100,100,100);
col2 = make_color_rgb(50,50,0);
part_type_color2(particle0, col1, col2);
part_type_life(particle0,20,40);
part_type_shape(particle0, pt_shape_disk);
part_type_size(particle0,.05,.125,.007,.008);

part_type_speed(particle0, 4, 6, 0, 0);
part_type_direction(particle0,0,359,0,0);
part_type_gravity(particle0, .75, 270);

particle1 = part_type_create();
part_type_alpha1(particle0, 1);
col1 = make_color_rgb(230,230,80);
col2 = make_color_rgb(50,50,0);

part_type_color2(particle1, col1, col2);
part_type_life(particle1,20,40);
part_type_shape(particle1, pt_shape_disk);
part_type_size(particle1,.05,.125,.007,.008);

part_type_speed(particle1, 4, 6, 0, 0);
part_type_direction(particle1,0,359,0,0);
part_type_gravity(particle1, .75, 270);
/*
part_type_speed(ind,speed_min,speed_max,speed_incr,speed_wiggle); 
part_type_direction(ind,dir_min,dir_max,dir_incr,dir_wiggle); 
part_type_gravity(ind,grav_amount,grav_dir); 
*/


/*
part_type_shape(particle0,shape); 
part_type_sprite(particle0,sprite,animate,stretch,random); 
part_type_orientation(particle0,ang_min,ang_max,ang_incr,ang_wiggle,a
ng_relative); 
part_type_size(particle0,size_min,size_max,size_incr,size_wiggle); 
part_type_scale(particle0,xscale,yscale); 

pt_shape_circle
pt_shape_cloud
pt_shape_disk
pt_shape_explosion
pt_shape_flare
pt_shape_line 
pt_shape_pixel
pt_shape_ring
pt_shape_smoke
pt_shape_spark 
pt_shape_sphere
*/

/*
part_type_life(particle0,life_min,life_max); 
part_type_step(particle0,step_number,step_type); 
part_type_death(particle0,death_number,death_type);
*/

/*
part_type_alpha1(particle0,alpha1); 
part_type_alpha2(particle0,alpha1,alpha2); 
part_type_alpha3(particle0,alpha1,alpha2,alpha3); 
*/

/*
part_type_blend(particle0,additive); 
part_type_color_hsv(particle0,hmin,hmax,smin,smax,vmin,vmax); 
part_type_color_rgb(particle0,rmin,rmax,gmin,gmax,bmin,bmax); 
part_type_color_mix(particle0,color1,color2); 
part_type_color1(particle0,color1); 
part_type_color2(particle0,color1,color2); 
part_type_color3(particle0,color1,color2,color3); 
*/






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// after expansion the buggy is now exploding
// and sprite set to invisible
//part_emitter_burst(system,emitter,particle0,5); 
//part_emitter_burst(system,emitter,particle1,5); 

state = "spawned";

//visible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//alarm 0 fire enabled = true
//alarm 1 = oka to jump
//declaming variables
screen_width = 320;
screen_height = 224;

if (state != "spawning" &amp;&amp; state != "deadfinal") {
    if (keyboard_check(vk_up) &amp;&amp; vspeed &gt; -1 * max_speed) vspeed -= .4; // allows jetpack
    if (keyboard_check(vk_down) &amp;&amp; vspeed &lt; max_speed) vspeed += .4;
    
    if (keyboard_check(vk_right) &amp;&amp; hspeed &lt; max_speed)
    {
    image_xscale = -1;
    hspeed +=.4;
    facedir="right";
    }
    if (keyboard_check(vk_left) &amp;&amp; hspeed &gt; -1 * max_speed)
    {
    image_xscale = 1;
    hspeed -=.4;
    facedir="left";
    }
    
    if ((state == "jumping")&amp;&amp; keyboard_check(vk_space))
    {
        if (jumpspeed &gt; -3)
        {
            jumpspeed+= -1;
        }
        vspeed += jumpspeed;
    }
    
    xmin = view_xview[0]; 
    xmax = view_xview[0] + view_wview[0];
    ymin = view_yview[0];
    ymax = view_yview[0] + view_hview[0];
    
    if ( x &lt; xmin ) {
    x = xmin ;//+ 1; // + 1 to push you out
    if (hspeed &lt; 0) hspeed *= -1;
    }
    else if (x &gt; xmax ) {
    x = xmax - 1; 
    hspeed *= -1;
    }
    
    if (y &lt; ymin ) {
    y = ymin + 1; 
    vspeed *= -1;
    }
    else if (y &gt; ymax) {
    y = ymax - 1;
    vspeed *= -1;
    }
    if (godmode == false) {
        if (place_meeting(x,y,baddy_parrent_obj)) {
            if(state!="dead"&amp;&amp;state!="deadfinal") {
                state = "dead";
                alarm[10]=90; // room restart();
                alarm[11] = 5; // sprite expend
                //vspeed =0;
                //hspeed = 0;
            }
        
        }
    }
    
    col_other = instance_position(x,y, speedup_obj) 
    if (col_other != noone) {
        view_mover_obj.hspeed += .5;
        max_speed += .5;
        with(col_other) instance_destroy();
    }
    col_other = instance_position(x,y, shiney_obj) 
    if (col_other != noone) {
        rand = round(random(2)); // picks a random sound from 1 - 2
        game_obj.score_multiple += 1;
        game_obj.score_timer += game_obj.score_timer_add;
        part = instance_create(x,y,score_particle);
        with(part) {
            str = string(game_obj.score_multiple);
        }
        
        if (combo &lt; combo_max) combo += 1;
        else combo = 1; // restart combo
        
        switch(combo) {
            case 1:
                if (rand &gt; 1 ) sound_play(shiney1);
                else sound_play(shiney1b);
                break;
            case 2:
                if (rand &gt; 1 ) sound_play(shiney2);
                else sound_play(shiney2b);
                break;
            case 3:
                if (rand &gt; 1 ) sound_play(shiney3);
                else sound_play(shiney3b);
                break;
            case 4:
                if (rand &gt; 1 ) sound_play(shiney4);
                else sound_play(shiney4b);
                break;
            case 5:
                if (rand &gt; 1 ) sound_play(shiney5);
                else sound_play(shiney5b);
                break;
        }
            
        with(col_other) instance_destroy();
    } 
  
  

} // end if state !dead
else if (state == "spawning") { //buggy is hit and is expanding
        image_xscale *= .75;
        image_yscale *= .75;
        
    if image_xscale &lt;1 {
        image_xscale =1;
        image_yscale =1;
    }
    //image_alpha *= 1.15;
}

/************** Particles ********/

part_emitter_region(system,emitter,x,x+20,y,y+20,ps_shape_rectangle,ps_distr_linear); 

/***********   **/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="square_obj">
      <action>
        <libid>1</libid>
        <id>115</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_bounce</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
